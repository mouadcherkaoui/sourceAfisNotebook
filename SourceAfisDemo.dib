#!csharp

#r "nuget: SourceAfis, 3.13.0"

#!markdown

first thing is adding the required usings statements.

#!csharp

using SourceAFIS;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using System.Diagnostics;
using System.Runtime.InteropServices;

#!markdown

now we need some methods to prepare/optimize the fingerprint bitmap for the matching operation.

- downscale the image

#!csharp

private Bitmap resizeBitmap(Bitmap bmp, int width, int height)
{
    Bitmap result = new Bitmap(width, height);
    using (Graphics graphics = Graphics.FromImage(result))
    {
        graphics.DrawImage(bmp, 0, 0, width, height);
    }
    return result;
}

#!markdown

- converting the bitmap to a gray scale one but keeping the PixelFormat as 8bppindexed

#!csharp

private Bitmap MakeGrayscaleWithColorMatrix(Bitmap original)
{
   var stopWatch = Stopwatch.StartNew();
     //create a blank bitmap the same size as original
     Bitmap newBitmap = new Bitmap(original.Width, original.Height);
     //get a graphics object from the new image
     Graphics g = Graphics.FromImage(newBitmap);
     //create the grayscale ColorMatrix
     ColorMatrix colorMatrix = new ColorMatrix(
        new float[][]
       {
          new float[] {.3f, .3f, .3f, 0, 0},
          new float[] {.59f, .59f, .59f, 0, 0},
          new float[] {.11f, .11f, .11f, 0, 0},
          new float[] {0, 0, 0, 1, 0},
          new float[] {0, 0, 0, 0, 1}
       });
     //create some image attributes
     ImageAttributes attributes = new ImageAttributes();
     //set the color matrix attribute
     attributes.SetColorMatrix(colorMatrix);
     //draw the original image on the new image
     //using the grayscale color matrix
     g.DrawImage(original, new Rectangle(0, 0, original.Width, original.Height),
        0, 0, original.Width, original.Height, GraphicsUnit.Pixel, attributes);
     //dispose the Graphics object
     g.Dispose();

     stopWatch.Stop();
     System.Console.WriteLine("{0}: {1}", nameof(MakeGrayscaleWithColorMatrix), stopWatch.Elapsed);
 
     return newBitmap;
 }

#!csharp

private unsafe Bitmap ToGrayscale(Bitmap colorBitmap)
{
    var stopWatch = Stopwatch.StartNew();

    int Width = colorBitmap.Width;
    int Height = colorBitmap.Height;

    Bitmap grayscaleBitmap = new Bitmap(Width, Height, PixelFormat.Format8bppIndexed);

    grayscaleBitmap.SetResolution(colorBitmap.HorizontalResolution,
                            colorBitmap.VerticalResolution);

    ///////////////////////////////////////
    // Set grayscale palette
    ///////////////////////////////////////
    ColorPalette colorPalette = grayscaleBitmap.Palette;
    for (int i = 0; i < colorPalette.Entries.Length; i++)
    {
        colorPalette.Entries[i] = Color.FromArgb(i, i, i);
    }
    grayscaleBitmap.Palette = colorPalette;
    ///////////////////////////////////////
    // Set grayscale palette
    ///////////////////////////////////////
    unsafe { 
        BitmapData bitmapData = grayscaleBitmap.LockBits(
            new Rectangle(Point.Empty, grayscaleBitmap.Size),
            ImageLockMode.WriteOnly, PixelFormat.Format8bppIndexed);
    
        Byte* pPixel = (Byte*)bitmapData.Scan0;
    
        for (int y = 0; y < Height; y++)
        {
            for (int x = 0; x < Width; x++)
            {
                Color clr = colorBitmap.GetPixel(x, y);
    
                Byte byPixel = (byte)((30 * clr.R + 59 * clr.G + 11 * clr.B) / 100);
    
                pPixel[x] = byPixel;
            }
    
            pPixel += bitmapData.Stride;
        }
    
        grayscaleBitmap.UnlockBits(bitmapData);
    }

    stopWatch.Stop();
    System.Console.WriteLine("{0}: {1}", nameof(ToGrayscale), stopWatch.Elapsed);
    return grayscaleBitmap;
}

#!markdown

- the last method will be used to get each bitmap pixels byte array

#!csharp

private byte[] getPixelsData(Bitmap source)
{
    var stopWatch = Stopwatch.StartNew();

    var bitmapData = source.LockBits(new Rectangle(0, 0, source.Width, source.Height), ImageLockMode.ReadOnly, source.PixelFormat);
    var length = bitmapData.Stride * bitmapData.Height;

    byte[] bytes = new byte[length];

    // Copy bitmap to byte[]
    Marshal.Copy(bitmapData.Scan0, bytes, 0, length);
    source.UnlockBits(bitmapData);

    stopWatch.Stop();
    System.Console.WriteLine("{0}: {1}", nameof(getPixelsData), stopWatch.Elapsed);

    return bytes;
}

#!markdown

- now we can add the method to generate fingerprints minutiae template

#!csharp

private FingerprintTemplate CreateTemplate(Bitmap source)
{
    //var bitmap = resizeBitmap(source, 300, 300);
    var grayBitmap = ToGrayscale(source);
    
    var pixels = getPixelsData(source);

    var image = Image.FromHbitmap(source.GetHbitmap());

    var graphics = Graphics.FromImage(image);

    var options = new FingerprintImageOptions
    {
        Dpi = graphics.DpiX
    };

    return new FingerprintTemplate(
        new FingerprintImage(
            source.Width, source.Height, pixels, options));

}

#!csharp

private bool FingerprintsMatching(Bitmap current, Bitmap candidate) {
    using (var stream = new MemoryStream())
    {
        FingerprintMatcher fingerprintMatcher;

        var stopWatch = Stopwatch.StartNew();

        var probe = CreateTemplate(current);
        var _candidate = CreateTemplate(candidate);


        fingerprintMatcher = new FingerprintMatcher(probe);

        double score = fingerprintMatcher
            .Match(_candidate);

        stopWatch.Stop();
        System.Console.WriteLine("{0}: {1}", nameof(FingerprintsMatching), stopWatch.Elapsed);

        System.Console.WriteLine($"score = {score}");

        bool matches = score >= 40;

        return matches;
    }
}

#!csharp

using Microsoft.DotNet.Interactive.Formatting;
private void Display(Bitmap source) 
{
    var memStream = new MemoryStream();
    source.Save(memStream, ImageFormat.Png);
    string base64str = Convert.ToBase64String(memStream.ToArray());
    display(PocketViewTags.img[src: "data:image/png;base64," + base64str]);
}

#!csharp

Bitmap current = new Bitmap("right_ring.bmp"); 
Bitmap candidate = new Bitmap("right_ring_test.bmp");

var currentGray = resizeBitmap(ToGrayscale(current), 300, 300);
Display(currentGray);

var candidateGray = resizeBitmap(MakeGrayscaleWithColorMatrix(candidate), 300, 300);
Display(candidateGray);

var result = FingerprintsMatching(candidate, current) ? "Matches" : "Not Matching";
Console.WriteLine(result);
